{"version":3,"sources":["Table.js","App.js","reportWebVitals.js","index.js"],"names":["Table","final_data","data_one","useMemo","data","columns","label","field","sort","width","rows","map","ele","call_id","label_id","toString","striped","bordered","hover","App","callOptions","labelOptions","useState","setfinal","rowOperationData","operation","callList","label_ops","sendOperation","toAdd","selected","value","labelSelected","name","op","console","log","axios","post","headers","user_id","then","useEffect","get","call_data","forEach","push","catch","error","unique_label_list","setSelected","setlabelSelected","options","onChange","labelledBy","type","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7f35281.chunk.js","sourcesContent":["import React, { useEffect, useMemo } from \"react\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\n\r\nfunction Table({ final_data }) {\r\n  const data_one = useMemo(() => final_data, [final_data]);\r\n\r\n  const tableData = data_one;\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"Call ID\",\r\n        field: \"call_id\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Labels\",\r\n        field: \"label\",\r\n        width: 270,\r\n      },\r\n    ],\r\n    rows: tableData?.map((ele) => {\r\n      return {\r\n        call_id: ele.call_id,\r\n        label: ele.label_id.toString(),\r\n      };\r\n    }),\r\n  };\r\n\r\n  return <MDBDataTable striped bordered hover data={data} />;\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\nimport MultiSelect from \"react-multi-select-component\";\nimport axios from \"axios\";\nimport Table from \"./Table\";\n\nfunction App() {\n  let callOptions = [];\n  let labelOptions = [];\n  const [final_data, setfinal] = useState([]);\n  let rowOperationData = { operation: { callList: [], label_ops: [] } };\n  // {\"operation\":{\"callList\":[0,1,2],\"label_ops\":[{\"name\":\"random\",\"op\":\"add\"},{\"name\":\"unread\",\"op\":\"add\"}]}}\n  const sendOperation = (toAdd) => {\n    rowOperationData.operation.callList = selected.map((ele) => ele.value);\n    rowOperationData.operation.label_ops = labelSelected.map((ele) => {\n      return { name: ele.value, op: toAdd ? \"add\" : \"remove\" };\n    });\n    console.log(rowOperationData);\n    axios\n      .post(\n        \"https://damp-garden-93707.herokuapp.com/applyLabels\",\n        rowOperationData,\n        {\n          headers: {\n            //\"Content-Type\": \"text/plain\",\n            user_id: \"24b456\",\n          },\n        }\n      )\n      .then(({ data }) => console.log(data));\n    console.log(final_data);\n  };\n  const onFinal = () => {\n    axios\n      .get(\"https://damp-garden-93707.herokuapp.com/getcalllist\", {\n        headers: {\n          user_id: \"24b456\",\n        },\n      })\n      .then(function ({ data }) {\n        // handle success\n        setfinal([]);\n        setfinal(data.data.call_data);\n      })\n\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    axios\n      .get(\"https://damp-garden-93707.herokuapp.com/getcalllist\", {\n        headers: {\n          user_id: \"24b456\",\n        },\n      })\n      .then(function ({ data }) {\n        // handle success\n        data.data.call_data.forEach((ele) => {\n          const op = {\n            label: ele.call_id,\n            value: ele.call_id,\n          };\n          callOptions.push(op);\n        });\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n\n    axios\n      .get(\"https://damp-garden-93707.herokuapp.com/getlistoflabels\", {\n        headers: {\n          user_id: \"24b456\",\n        },\n      })\n      .then(function ({ data }) {\n        // handle success\n        data.data.unique_label_list.forEach((ele) => {\n          const op = {\n            label: ele,\n            value: ele,\n          };\n          labelOptions.push(op);\n        });\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n  });\n\n  const [selected, setSelected] = useState([]);\n  const [labelSelected, setlabelSelected] = useState([]);\n\n  return (\n    <div>\n      <h1>Add or Remove Labels </h1>\n\n      <MultiSelect\n        options={callOptions}\n        value={selected}\n        onChange={setSelected}\n        labelledBy={\"Select\"}\n        //displayValue =\"call_id\"\n      />\n\n      <MultiSelect\n        options={labelOptions}\n        value={labelSelected}\n        onChange={setlabelSelected}\n        labelledBy={\"Select\"}\n        //displayValue =\"call_id\"\n      />\n      <button\n        type=\"submit\"\n        onClick={() => {\n          sendOperation(true);\n        }}\n      >\n        Add Label\n      </button>\n      <button\n        type=\"submit\"\n        onClick={() => {\n          sendOperation(false);\n        }}\n      >\n        Remove Label\n      </button>\n      <button type=\"submit\" onClick={onFinal}>\n        Showdata\n      </button>\n\n      <Table final_data={final_data} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}